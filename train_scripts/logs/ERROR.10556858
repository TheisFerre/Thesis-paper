INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/yellow-taxi2020-nov-REGION.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/citibike-tripdata-REGION.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/LYFT2014-july-sep-GRID.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/UBER2015-jan-june-GRID.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/TLC2018-FHV-aug-REGION.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/T-Drive-taxi-pickups-GRID.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/UBER2015-jan-june-REGION.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/green-taxi2020-dec-GRID.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/TLC2018-FHV-aug-GRID.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/citibike-tripdata-GRID.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/yellow-taxi2020-nov-GRID.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/green-taxi2020-dec-REGION.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/citibike2014-tripdata-GRID.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/metalearning/citibike2014-tripdata-REGION.pkl
INFO:__main__:{'yellow-taxi2020-nov-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a134fe80>, 'citibike-tripdata-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a119adf0>, 'LYFT2014-july-sep-GRID': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a0cddf70>, 'UBER2015-jan-june-GRID': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a0cddeb0>, 'TLC2018-FHV-aug-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a114ac10>, 'T-Drive-taxi-pickups-GRID': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a10753a0>, 'UBER2015-jan-june-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a085ca30>, 'green-taxi2020-dec-GRID': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a0bbfd00>, 'TLC2018-FHV-aug-GRID': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a0b579d0>, 'citibike-tripdata-GRID': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a083d130>, 'yellow-taxi2020-nov-GRID': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a07c7370>, 'green-taxi2020-dec-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7ff7a06da160>, 'citibike2014-tripdata-GRID': <torch_geometric.data.dataloader.DataLoader object at 0x7ff79f07c670>, 'citibike2014-tripdata-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7ff79f3d8f40>}
INFO:__main__:Fitting model at time: 2021-10-04 13:02:42.312353
UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the gradient for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more information.
Traceback (most recent call last):
  File "/zhome/2b/7/117471/Thesis/src/models/train_meta.py", line 172, in <module>
    model = train_model(
  File "/zhome/2b/7/117471/Thesis/src/models/train_meta.py", line 82, in train_model
    support_preds = learner(support_data)
  File "/zhome/2b/7/117471/Thesis/venv-thesis/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/zhome/2b/7/117471/Thesis/venv-thesis/lib/python3.8/site-packages/learn2learn/algorithms/maml.py", line 107, in forward
    return self.module(*args, **kwargs)
  File "/zhome/2b/7/117471/Thesis/venv-thesis/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/zhome/2b/7/117471/Thesis/src/models/models.py", line 567, in forward
    x = self.edgeconv3(x, batch=batched_data.batch)
  File "/zhome/2b/7/117471/Thesis/venv-thesis/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/zhome/2b/7/117471/Thesis/venv-thesis/lib/python3.8/site-packages/torch_geometric/nn/conv/edge_conv.py", line 112, in forward
    edge_index = knn(x[0], x[1], self.k, b[0], b[1],
KeyboardInterrupt
