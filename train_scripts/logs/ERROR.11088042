INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/yellow-taxi2020-nov-HOUR4-REGION.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/yellow-taxi2020-nov-HOUR8-GRID5.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/UBER2015-jan-june-HOUR4-GRID10.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/UBER2015-jan-june-HOUR1-GRID5.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/yellow-taxi2020-nov-HOUR8-GRID10.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/yellow-taxi2020-nov-HOUR1-GRID5.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/UBER2015-jan-june-HOUR4-REGION.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/UBER2015-jan-june-HOUR1-GRID10.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/yellow-taxi2020-nov-HOUR1-REGION.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/yellow-taxi2020-nov-HOUR4-GRID10.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/UBER2015-jan-june-HOUR1-REGION.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/UBER2015-jan-june-HOUR8-GRID10.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/yellow-taxi2020-nov-HOUR8-REGION.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/yellow-taxi2020-nov-HOUR4-GRID5.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/UBER2015-jan-june-HOUR8-GRID5.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/yellow-taxi2020-nov-HOUR1-GRID10.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/UBER2015-jan-june-HOUR4-GRID5.pkl
INFO:__main__:/zhome/2b/7/117471/Thesis/data/processed/ablation-augmented/UBER2015-jan-june-HOUR8-REGION.pkl
INFO:__main__:{'yellow-taxi2020-nov-HOUR4-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f92149f40>, 'yellow-taxi2020-nov-HOUR8-GRID5': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f91c48b80>, 'UBER2015-jan-june-HOUR4-GRID10': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f91c12b50>, 'UBER2015-jan-june-HOUR1-GRID5': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f913cf790>, 'yellow-taxi2020-nov-HOUR8-GRID10': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f91c62b50>, 'yellow-taxi2020-nov-HOUR1-GRID5': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f91af3a90>, 'UBER2015-jan-june-HOUR4-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f913a0e50>, 'UBER2015-jan-june-HOUR1-GRID10': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f913be430>, 'yellow-taxi2020-nov-HOUR1-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f90e77b50>, 'yellow-taxi2020-nov-HOUR4-GRID10': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f91222c70>, 'UBER2015-jan-june-HOUR1-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f90efa820>, 'UBER2015-jan-june-HOUR8-GRID10': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f90e07d00>, 'yellow-taxi2020-nov-HOUR8-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f90e2c400>, 'yellow-taxi2020-nov-HOUR4-GRID5': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f90b04f70>, 'UBER2015-jan-june-HOUR8-GRID5': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f90a70730>, 'yellow-taxi2020-nov-HOUR1-GRID10': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f90a08880>, 'UBER2015-jan-june-HOUR4-GRID5': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f90a1faf0>, 'UBER2015-jan-june-HOUR8-REGION': <torch_geometric.data.dataloader.DataLoader object at 0x7f1f909902b0>}
INFO:__main__:Fitting model at time: 2021-11-18 08:44:12.362681
UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the gradient for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more information.
UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
